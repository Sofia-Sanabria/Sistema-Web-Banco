package Contenidos;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.List;

import clasesSWB.Cuenta;
import clasesSWB.PersistenceManager;
import clasesSWB.Transaccion;
import clasesSWB.PagoTarjeta;
import clasesSWB.Transferencia;
import clasesSWB.PagoServicios;

import javax.swing.DefaultComboBoxModel;

        
/**
 *
 * @author MAN-U
 */
public class PanelHistorial extends javax.swing.JPanel implements Interface_Panel{

    /**
     * Creates new form Historial
     */
    public PanelHistorial() {
        initComponents();
        changeComponentsProperties();
    }
    
    /**
     * Método que cambia el color y la transparencia del jPanel. 
     */
    @Override
    public final void changeComponentsProperties(){
        this.setBackground(new Color(0, 0, 0, 0));
    }
    
    /**
     * Llama al método desplegarX para desplegar de manera horizontal cada uno de los 
     * componentes contenidos en el jPanel
     */
    @Override
    public void desplegarComponentes(){
        desplegarX(jPanelHistorial, 290, 1);
        desplegarX(jLabelHistorialTransacciones, 290, 1);
        desplegarX(jLabelSaldo, 290, 1);        
        desplegarX(jComboBoxTransferencias, 290, 1);
        desplegarX(jComboBoxDeposito, 290, 1);
        desplegarX(jComboBoxPagosMisTarjetas, 290, 1);
        desplegarX(jComboBoxPagosOtrasTarjetas, 290, 1);
        desplegarX(jComboBoxPagosServicios, 290, 1);
    }
    
    /**
     * Llama al método plegarX para plegar de manera horizontal cada uno de los 
     * componentes contenidos en el jPanel
     */
    @Override
    public void plegarComponentes(){
        plegarX(jPanelHistorial, 290, 1);
        plegarX(jLabelHistorialTransacciones, 290, 1);
        plegarX(jLabelSaldo, 290, 1);
        plegarX(jComboBoxTransferencias, 290, 1);
        plegarX(jComboBoxDeposito, 290, 1);
        plegarX(jComboBoxPagosMisTarjetas, 290, 1);
        plegarX(jComboBoxPagosOtrasTarjetas, 290, 1);
        plegarX(jComboBoxPagosServicios, 290, 1);
    }
    
    /**
     * Método que cambia la dimensión de un Component simulando su despliegue en pantalla
     * @param jcomponent      Component a ser desplegado
     * @param totalDesplegarX Parámetro tipo int que determina cuanto se sumará a la anchura
     * actual del JPanel
     * @param time            Milisegundos para simular los intervalos de la animación
     */
    @Override
    public void desplegarX(Component jcomponent, int totalDesplegarX, int time){
        Thread hiloDesplegar = new Thread() { //declara un nuevo hilo
            @Override
            public void run(){
                int anchuraActual = jcomponent.getWidth();
                //ciclo en donde se redimensiona el widget
                for(int desplegarX = anchuraActual; desplegarX <= anchuraActual+totalDesplegarX; desplegarX++){
                    try {
                        Thread.sleep(time);
                        jcomponent.setSize(new Dimension(desplegarX, jcomponent.getHeight())); //redimensiona el JPanel
                    } catch (InterruptedException ex) {
                        System.err.print("No se pudo desplegar el Component");
                    }
                }
            }
        }; hiloDesplegar.start();
    }
    
    
    /**
     * Método que cambia la dimensión de un Component simulando su plegado
     * @param jcomponent   Component a ser plegado
     * @param totalPlegarX Parámetro tipo int que determina cuanto se restará a la anchura
     * actual del JPanel
     * @param time   Milisegundos para simular los intervalos de la animación
     */
    @Override
    public void plegarX(Component jcomponent, int totalPlegarX, int time){
        Thread hiloPlegar = new Thread() { //declara un nuevo hilo
            @Override
            public void run(){ 
                int anchuraActual = jcomponent.getWidth();
                //ciclo en donde se disminuye la dimensión del JPanel de uno en uno
                for(int plegarX = anchuraActual; plegarX >= anchuraActual-totalPlegarX; plegarX--){ 
                    //captura la excepción InterruptedException generada por .sleep()
                    try {
                        Thread.sleep(time);
                        jcomponent.setSize(new Dimension(plegarX, jcomponent.getHeight())); //redimensiona el JPanel
                    } catch (InterruptedException ex) {
                        System.err.print("No se pudo plegar el Component");
                    }
                }
            }
        }; hiloPlegar.start(); //comienza el hilo
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelHistorial = new javax.swing.JPanel();
        jLabelDeposito = new javax.swing.JLabel();
        jLabelSaldo = new javax.swing.JLabel();
        jLabelHistorialTransacciones = new javax.swing.JLabel();
        jLabelTransferencias = new javax.swing.JLabel();
        jLabelPagosServicios = new javax.swing.JLabel();
        jComboBoxPagosServicios = new javax.swing.JComboBox<>();
        jComboBoxDeposito = new javax.swing.JComboBox<>();
        jComboBoxTransferencias = new javax.swing.JComboBox<>();
        jLabelPagosMisTarjetas = new javax.swing.JLabel();
        jComboBoxPagosMisTarjetas = new javax.swing.JComboBox<>();
        jLabelPagosOtrasTarjetas = new javax.swing.JLabel();
        jComboBoxPagosOtrasTarjetas = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(51, 204, 255));
        setForeground(new java.awt.Color(102, 102, 102));

        jPanelHistorial.setBackground(new java.awt.Color(68, 114, 196));

        jLabelDeposito.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabelDeposito.setForeground(new java.awt.Color(255, 255, 255));
        jLabelDeposito.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelDeposito.setText("Deposito");
        jLabelDeposito.setMaximumSize(new java.awt.Dimension(1366, 748));
        jLabelDeposito.setPreferredSize(new java.awt.Dimension(755, 32));

        jLabelSaldo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabelSaldo.setForeground(new java.awt.Color(255, 255, 255));
        jLabelSaldo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSaldo.setText("$$$ DOLARES ");
        jLabelSaldo.setMaximumSize(new java.awt.Dimension(1366, 748));
        jLabelSaldo.setPreferredSize(new java.awt.Dimension(755, 32));

        jLabelHistorialTransacciones.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabelHistorialTransacciones.setForeground(new java.awt.Color(255, 255, 255));
        jLabelHistorialTransacciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelHistorialTransacciones.setText("Historial Transacciones");
        jLabelHistorialTransacciones.setMaximumSize(new java.awt.Dimension(1366, 748));
        jLabelHistorialTransacciones.setPreferredSize(new java.awt.Dimension(755, 32));

        jLabelTransferencias.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabelTransferencias.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTransferencias.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelTransferencias.setText("Transferencias");
        jLabelTransferencias.setMaximumSize(new java.awt.Dimension(1366, 748));
        jLabelTransferencias.setPreferredSize(new java.awt.Dimension(755, 32));

        jLabelPagosServicios.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabelPagosServicios.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPagosServicios.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelPagosServicios.setText("Pagos de Servicios");
        jLabelPagosServicios.setMaximumSize(new java.awt.Dimension(1366, 748));
        jLabelPagosServicios.setPreferredSize(new java.awt.Dimension(755, 32));

        jComboBoxPagosServicios.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jComboBoxPagosServicios.setForeground(new java.awt.Color(102, 102, 102));

        jComboBoxDeposito.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jComboBoxDeposito.setForeground(new java.awt.Color(102, 102, 102));

        jComboBoxTransferencias.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jComboBoxTransferencias.setForeground(new java.awt.Color(102, 102, 102));

        jLabelPagosMisTarjetas.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabelPagosMisTarjetas.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPagosMisTarjetas.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelPagosMisTarjetas.setText("Pagos Mis Tarjetas ");
        jLabelPagosMisTarjetas.setMaximumSize(new java.awt.Dimension(1366, 748));
        jLabelPagosMisTarjetas.setPreferredSize(new java.awt.Dimension(755, 32));

        jComboBoxPagosMisTarjetas.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jComboBoxPagosMisTarjetas.setForeground(new java.awt.Color(102, 102, 102));

        jLabelPagosOtrasTarjetas.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabelPagosOtrasTarjetas.setForeground(new java.awt.Color(255, 255, 255));
        jLabelPagosOtrasTarjetas.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelPagosOtrasTarjetas.setText("Pagos Otras Tarjetas");
        jLabelPagosOtrasTarjetas.setMaximumSize(new java.awt.Dimension(1366, 748));
        jLabelPagosOtrasTarjetas.setPreferredSize(new java.awt.Dimension(755, 32));

        jComboBoxPagosOtrasTarjetas.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jComboBoxPagosOtrasTarjetas.setForeground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanelHistorialLayout = new javax.swing.GroupLayout(jPanelHistorial);
        jPanelHistorial.setLayout(jPanelHistorialLayout);
        jPanelHistorialLayout.setHorizontalGroup(
            jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHistorialLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE)
                    .addGroup(jPanelHistorialLayout.createSequentialGroup()
                        .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelPagosOtrasTarjetas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                            .addComponent(jLabelPagosMisTarjetas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabelDeposito, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabelTransferencias, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabelPagosServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxTransferencias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxPagosMisTarjetas, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxDeposito, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxPagosOtrasTarjetas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxPagosServicios, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelHistorialLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabelHistorialTransacciones, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanelHistorialLayout.setVerticalGroup(
            jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHistorialLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabelSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxTransferencias, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                    .addComponent(jLabelTransferencias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxDeposito)
                    .addGroup(jPanelHistorialLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelDeposito, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxPagosMisTarjetas)
                    .addGroup(jPanelHistorialLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelPagosMisTarjetas, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxPagosOtrasTarjetas)
                    .addGroup(jPanelHistorialLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelPagosOtrasTarjetas, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxPagosServicios, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                    .addComponent(jLabelPagosServicios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(jPanelHistorialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelHistorialLayout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabelHistorialTransacciones, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(487, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(398, Short.MAX_VALUE)
                .addComponent(jPanelHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(391, 391, 391))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jPanelHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(174, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxDeposito;
    private javax.swing.JComboBox<String> jComboBoxPagosMisTarjetas;
    private javax.swing.JComboBox<String> jComboBoxPagosOtrasTarjetas;
    private javax.swing.JComboBox<String> jComboBoxPagosServicios;
    private javax.swing.JComboBox<String> jComboBoxTransferencias;
    private javax.swing.JLabel jLabelDeposito;
    private javax.swing.JLabel jLabelHistorialTransacciones;
    private javax.swing.JLabel jLabelPagosMisTarjetas;
    private javax.swing.JLabel jLabelPagosOtrasTarjetas;
    private javax.swing.JLabel jLabelPagosServicios;
    private javax.swing.JLabel jLabelSaldo;
    private javax.swing.JLabel jLabelTransferencias;
    private javax.swing.JPanel jPanelHistorial;
    // End of variables declaration//GEN-END:variables
    
    public void mostrarInformacionCliente(Cuenta cuenta, PersistenceManager datos) {
        // Mostrar la información en el Panel Historial
        jLabelSaldo.setText(String.valueOf(cuenta.getSaldo()) + "$");

        // Obtener todas las transferencias asociadas al cliente
        List<Transferencia> transferencias = datos.getTransferencias();
        
        // Obtener todos los depositos asociados al cliente
        List<Transaccion> depositos = datos.getDepositos();

        // Obtener todos los pagos de mis Tarjetas
        List<PagoTarjeta> misTarjetas = datos.getPagosTarjeta();
        
        // Obtener todos los pagos de Otras Tarjetas
        List<PagoTarjeta> otrasTarjetas = datos.getPagosTarjeta();
        
        // Obtener todos los pagos de servicios
        List<PagoServicios> servicios = datos.getPagoServicios();

        // Crear DefaultComboBoxModel para cada JComboBox
        DefaultComboBoxModel<String> comboBoxModelTransferencia = new DefaultComboBoxModel<>();
        DefaultComboBoxModel<String> comboBoxModelDeposito = new DefaultComboBoxModel<>();
        DefaultComboBoxModel<String> comboBoxModelMisTarjetas = new DefaultComboBoxModel<>();
        DefaultComboBoxModel<String> comboBoxModelOtrasTarjetas = new DefaultComboBoxModel<>();
        DefaultComboBoxModel<String> comboBoxModelServicios = new DefaultComboBoxModel<>();
         
        // Agregar las transferencias al modelo
        for (Transferencia transferencia: transferencias) {
            String item = transferencia.getIDCuenta() + " - " + transferencia.getMontoTransaccion()+  " - " + transferencia.getFechaTransaccion();  
            comboBoxModelTransferencia.addElement(item);
        }
        
        // Agregar los depositos al modelo
        for (Transaccion deposito: depositos) {
            String item = deposito.getIDCuenta() + " - " + deposito.getMontoTransaccion() + " - " + deposito.getFechaTransaccion();  
            comboBoxModelDeposito.addElement(item);
        }
        
        // Agregar los pagos de mis tarjetas a los modelos
        for (PagoTarjeta tarjeta : misTarjetas) {
            String item = tarjeta.getIDCuenta() + " - " + tarjeta.getNumeroTarjeta() + " - " + tarjeta.getSaldoActual() + " - " + tarjeta.getDeudaTarjeta();
            comboBoxModelMisTarjetas.addElement(item);
        }   
        
        // Agregar los pagos de otras tarjetas a los modelos
        for (PagoTarjeta tarjeta : otrasTarjetas) {
            String item = tarjeta.getIDCuenta() + " - " + tarjeta.getNumeroTarjeta() + " - " + tarjeta.getSaldoActual() + " - " + tarjeta.getDeudaTarjeta();
            comboBoxModelOtrasTarjetas.addElement(item);
        }   
        
        // Agregar los pagos de servicios a los modelos
        for (PagoServicios servicio : servicios) {
            String item = servicio.getIDCuenta() + " - " + servicio.getCodigoServicio() + " - " + servicio.getDeudaServicio() + " - " + servicio.getFechaVencimiento();
            comboBoxModelServicios.addElement(item);
        }  

        // Asignar modelos a JComboBox
        jComboBoxTransferencias.setModel(new DefaultComboBoxModel<>(convertirAArray(comboBoxModelTransferencia)));
        jComboBoxDeposito.setModel(new DefaultComboBoxModel<>(convertirAArray(comboBoxModelDeposito)));
        jComboBoxPagosMisTarjetas.setModel(new DefaultComboBoxModel<>(convertirAArray(comboBoxModelMisTarjetas)));
        jComboBoxPagosOtrasTarjetas.setModel(new DefaultComboBoxModel<>(convertirAArray(comboBoxModelOtrasTarjetas)));
        jComboBoxPagosServicios.setModel(new DefaultComboBoxModel<>(convertirAArray(comboBoxModelServicios)));
    }


    // Método para convertir un ComboBoxModel a un array
    private String[] convertirAArray(DefaultComboBoxModel<String> comboBoxModel) {
        int size = comboBoxModel.getSize();
        String[] array = new String[size];

        for (int i = 0; i < size; i++) {
            array[i] = comboBoxModel.getElementAt(i);
        }

        return array;
    }   
    

}
